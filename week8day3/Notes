List:
List interface is the child interface of Collection interface. It inhibits a list type data structure in which we can store the ordered collection of objects. It can have duplicate values.
 
List interface is implemented by the classes ArrayList, LinkedList, Vector, and Stack.
 
1.ArrayList
The ArrayList class implements the List interface. It uses a dynamic array to store the duplicate element of different data types. The ArrayList class maintains the insertion order and is non-synchronized. The elements stored in the ArrayList class can be randomly accessed.
 
2.LinkedList
LinkedList implements the Collection interface. It uses a doubly linked list internally to store the elements. It can store the duplicate elements. It maintains the insertion order and is not synchronized. In LinkedList, the manipulation is fast because no shifting is required.
 
3.Vector
Vector uses a dynamic array to store the data elements. It is similar to ArrayList. However, It is synchronized and contains many methods that are not the part of Collection framework.
 
4.Stack
The stack is the subclass of Vector. It implements the last-in-first-out data structure, i.e., Stack. The stack contains all of the methods of Vector class and also provides its methods like boolean push(), boolean peek(), boolean push(object o), which defines its properties
 
Queue Interface
Queue interface maintains the first-in-first-out order. It can be defined as an ordered list that is used to hold the elements which are about to be processed. There are various classes like PriorityQueue, Deque, and ArrayDeque which implements the Queue interface.
 
1.PriorityQueue
The PriorityQueue class implements the Queue interface. It holds the elements or objects which are to be processed by their priorities. PriorityQueue doesn't allow null values to be stored in the queue.
 
2.Deque Interface
Deque interface extends the Queue interface. In Deque, we can remove and add the elements from both the side. Deque stands for a double-ended queue which enables us to perform the operations at both the ends.
 
3.ArrayDeque
ArrayDeque class implements the Deque interface. It facilitates us to use the Deque. Unlike queue, we can add or delete the elements from both the ends.
 
ArrayDeque is faster than ArrayList and Stack and has no capacity restrictions.
 
Set Interface
Set Interface in Java is present in java.util package. It extends the Collection interface. It represents the unordered set of elements which doesn't allow us to store the duplicate items. We can store at most one null value in Set. Set is implemented by HashSet, LinkedHashSet, and TreeSet.
 
1.HashSet
 
HashSet class implements Set Interface. It represents the collection that uses a hash table for storage. Hashing is used to store the elements in the HashSet. It contains unique items.
 
2.LinkedHashSet
LinkedHashSet class represents the LinkedList implementation of Set Interface. It extends the HashSet class and implements Set interface. Like HashSet, It also contains unique elements. It maintains the insertion order and permits null elements.
 
3.SortedSet Interface
SortedSet is the alternate of Set interface that provides a total ordering on its elements. The elements of the SortedSet are arranged in the increasing (ascending) order. The SortedSet provides the additional methods that inhibit the natural ordering of the elements.
 
4.TreeSet
Java TreeSet class implements the Set interface that uses a tree for storage. Like HashSet, TreeSet also contains unique elements. However, the access and retrieval time of TreeSet is quite fast. The elements in TreeSet stored in ascending order.
 
Java HashMap class implements the Map interface which allows us to store key and value pair, where keys should be unique.
 
Map Interface
A map contains values on the basis of key, i.e. key and value pair. Each key and value pair is known as an entry. A Map contains unique keys.
 
1.HashMap
A Map is useful if you have to search, update or delete elements on the basis of a key.
Java HashMap contains values based on the key.
Java HashMap contains only unique keys.
Java HashMap may have one null key and multiple null values.
Java HashMap is non synchronized.
Java HashMap maintains no order.
 
 
Colletion
|
List
Queue
Set
 
Map
|
HashMap
Linked HashMap
 
--SortedMap
|
TreeMap
 
import java.util.HashMap;
import java.util.Map;
class MapDemo{
  public static void main(String args[]){
    HashMap<Integer,String> map=new HashMap<Integer,String>();
    map.put(101,"lalitha");
    map.put(102,"anitha");
    map.put(103,"kavitha");
    map.putIfAbsent(104, "saritha");
    map.putIfAbsent(104, "saritha");
    System.out.println(map);
    Integer key=104;
  for(Map.Entry m:map.entrySet()){
    if(m.getKey()==key){
      System.out.println(m.getValue());
      
    }
  }
  }
}
 
-------------------------------------------------------
import java.util.HashMap;
import java.util.Map;
class MapDemo{
  public static void main(String args[]){
    HashMap<Integer,String> map=new HashMap<Integer,String>();
    map.put(101,"lalitha");
    map.put(102,"anitha");
    map.put(103,"kavitha");
    map.putIfAbsent(104, "saritha");
    map.putIfAbsent(104, "saritha");
    
    Integer key=104;
    map.remove(102);
    System.out.println(map.get(104));
    System.out.println(map);
  for(Map.Entry m:map.entrySet()){
    if(m.getKey()==key){
      System.out.println(m.getValue());
      
    }
    
  }
  }
}
------------------------------------------------------------------------
class MapDemo{
  public static void main(String args[]){
    LinkedHashMap<Integer,Integer> map=new LinkedHashMap<Integer,Integer>();
    map.put(12,1234);
    map.put(15,3456);
    map.put(16,4567);
    //for(Map.Entry m:map.entrySet()){
      if(map.containsValue(4578)){
        System.out.println("Found");
      }
    else{
      System.out.println("Not Found");
    }
    
  }
}
----------------------------------------------------------------------------------
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;
 
class Student{
  int rollno;
  String name;
  Student(int rollno,String name){
    this.rollno=rollno;
    this.name=name;
  }
}
class MapDemo{
  public static void main(String args[]){
    LinkedHashMap<Integer,Student> map=new LinkedHashMap<Integer,Student>();
    Scanner sc=new Scanner(System.in);
    for(int i=1;i<=3;i++){
      map.put(i,new Student(sc.nextInt(),sc.next()));
    }
 
    for(Map.Entry m:map.entrySet()){
      Student st=(Student)m.getValue(); 
      System.out.println("key is "+m.getKey()+"value is "+m.getValue());
      System.out.println("values are");
      System.out.println(st.rollno+" "+st.name);
      
    }
  }
}